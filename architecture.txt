# Word Survivors Code Architecture

## Files Overview

This document outlines the purpose and organization of each major file in the Word Survivors project.

### Core Game Files

**index.html** - Main game file containing the Phaser game initialization, core gameplay loop, and central coordination of all systems. Handles game start/restart, global variable declarations, and core configuration.

**weapons.js** - Implements the `WeaponSystem` which centralizes the player's primary weapon firing logic. Manages the firing timer (scaling with fire rate), target selection (closest enemy), and basic projectile creation, integrating with perk systems for effects like double shot or piercing.

**hero.js** - Manages the player character's state, attributes, and status effects through a component-based system (`PlayerComponentSystem`). Contains the hero's basic properties (kanji, translations, base stats) and implements a framework for applying, updating, and removing status effects (components like `berserkerState`, `eternalRhythmState`, `permanentShieldAbility`) triggered by perks or game conditions. Includes a registry (`PlayerPerkRegistry`) to link perks to player status components and manages the `ShieldSystem`.

**bestiary.js** - Defines all enemy types using Japanese kanji characters, including their base properties like translations and readings. Implements rank-based defaults (health, speed, size, etc.) and provides utility functions to retrieve enemy data and generate random enemies during gameplay. Also handles dynamic assignment of enemies to difficulty tiers.

**enemy.js** - Implements the `EnemySystem` which handles enemy spawning, movement, attack patterns, and difficulty scaling. Manages enemy rank progression over time and controls spawn rates based on game progression.

### Component Systems

**artillery.js** - Implements the component-based system (`ProjectileComponentSystem`) for projectiles. Defines the framework for creating and managing reusable components (like `distanceDamage`, `slowEffect`, `poisonEffect`, `splitEffect`, `fireEffect`) that can be attached to projectiles, allowing for modular behavior.

**ballistics.js** - Provides a registry system (`ProjectilePerkRegistry`) that connects perks to projectile components defined in `artillery.js`. Automates the application of effects (components) to projectiles based on which perks the player has acquired, often involving chance calculations based on player luck.

**droppers.js** - Implements the system (`DropperSystem`) for player-generated persistent world objects ("drops") like landmines or afterimages. Defines behaviors (`DropBehaviors`: explosive, persistent, areaEffect) and manages their lifecycle, enemy interactions, and periodic spawning.

**entrapments.js** - Defines `DropperPerkRegistry` which connects specific perks (from `perks.js`) to the dropper system (`droppers.js`). Automates the creation and configuration of drops (like landmines from 'Amber Beetle' or afterimages from 'Green Dream') based on acquired perks.

**orbitals.js** - Implements the system (`OrbitalSystem`) for entities that orbit the player. Defines various movement patterns (`MovementPatterns`: standard, elliptical, figureEight, etc.) and collision behaviors (`CollisionBehaviors`: persistent, projectile, explosive) and manages their lifecycle and enemy interactions.

**nexus.js** - Defines `OrbitalPerkRegistry` which connects specific perks (from `perks.js`) to the orbital system (`orbitals.js`). Automates the creation and configuration of orbitals (like 'Teal Octopus' projectiles or 'Immortal' body parts) based on acquired perks, managing counts and cooldowns. Also contains familiar-related functions for entities that orbit the player and fire projectiles.

**onhit.js** - Implements the `OnHitEffectSystem` that manages effects triggered when the player is hit by enemies. Uses a component-based architecture similar to other systems, with an `OnHitPerkRegistry` to connect perks to on-hit effects.

**playerhit.js** - Manages player damage handling, invincibility frames, and visual effects when the player is hit. Creates blood vignette effects and handles player death conditions.

**familiars.js** - Provides the `FamiliarSystem` which manages orbital entities with firing behavior. Defines different familiar behaviors, firing patterns, and helper functions for familiar creation and management.

### UI and Input

**menu.js** - Manages UI elements like the player's Health Bar and Experience Bar, including their creation and dynamic updates based on player stats. Contains the `GameUI` interface for other files to interact with.

**input.js** - Provides custom input handling enhancements through the `InputSystem`. Manages cursor visibility, automatic hiding after inactivity, and ensures proper state restoration when the game window focus changes.

**cards.js** - Contains reusable functions for creating and managing perk card UI elements. Provides the `CardSystem` which standardizes card creation, styling, and interaction handling.

**challenge.js** - Implements the `RomajiChallengeSystem` which manages the romaji typing challenge during level-up screens. Handles card display, input validation, and rewards for successful challenges.

**pause.js** - Provides the `PauseSystem` that handles game pausing, the pause overlay UI, and perk display during pauses. Manages game state during pauses and ensures proper restoration when resuming.

**debug.js** - Implements the `DebugSystem` which provides debugging utilities and performance monitoring. Manages debug keyboard shortcuts (R, T, K, O keys), performance statistics display, and phase skipping functionality for testing.

### Life and Health Systems

**life.js** - Contains the `LifeSystem` which manages player health regeneration and healing effects. Handles health timer creation, regeneration rates based on stats, and visual effects for healing.

### Perk and Effect Systems

**perks.js** - Contains definitions for all player upgrades ("perks") including their kanji representations, translations, descriptions, visual styles, and effects. Each perk has an `onAcquire` function that triggers its immediate effect (like stat changes or activating a system) when the player selects it during level-up.

**cooldown.js** - Defines `CooldownManager` which manages timers whose cooldowns dynamically scale based on player stats (like luck or fire rate). Updates these timers automatically when the relevant stats change significantly, ensuring abilities scale correctly with upgrades.

**onetime.js** - Defines `OneTimeEffects` which manages effects that trigger only once upon acquiring certain perks (e.g., screen clearing blasts like `shuuen`, stat scrambles like `purpleChaos`). Provides a registry and a function (`triggerOneTimeEffect`) to execute these single-use effects.

### Visual Effects

**visuals.js** - Contains the `VisualEffects` namespace which provides reusable visual effects functions. Includes effects like explosions, damage flashes, pulsing animations, and lightning visuals that can be used throughout the game.

### Utility Files

**todobugs.txt** - A plain text file tracking known bugs, planned features, and potential improvements for the game. Primarily for human developer reference.

## Perk System Organization

The perk system is distributed across multiple files following a component-based architecture:

1. **perks.js** - Defines all perks and their basic properties, including the `onAcquire` function that runs when a perk is selected.

2. **Registry Files** - Several registry files connect perks to specific game systems:
   - `ballistics.js` (ProjectilePerkRegistry) - Maps perks to projectile components
   - `entrapments.js` (DropperPerkRegistry) - Maps perks to dropper effects
   - `nexus.js` (OrbitalPerkRegistry) - Maps perks to orbital and familiar effects
   - `hero.js` (PlayerPerkRegistry) - Maps perks to player status effects
   - `onhit.js` (OnHitPerkRegistry) - Maps perks to on-hit effects

3. **Component Files** - Define the actual effect implementations:
   - `artillery.js` (ProjectileComponentSystem) - Projectile components
   - `droppers.js` (DropperSystem) - Dropper components
   - `orbitals.js` (OrbitalSystem) - Orbital components
   - `hero.js` (PlayerComponentSystem) - Player status components
   - `onhit.js` (OnHitEffectSystem) - On-hit effect components

This architecture allows new perks to be added by:
1. Adding the perk definition to `perks.js`
2. Registering it with the appropriate registry
3. Creating component implementations if needed

## Component-Based Architecture

The game uses a component-based architecture across multiple systems:

1. **Components**: Self-contained units of behavior that can be attached to game entities
2. **Component Systems**: Manage creation, updates, and cleanup of components
3. **Registries**: Connect perks to components, allowing automated application of effects

This architecture enables:
- Modular and reusable code
- Easy addition of new effects
- Separation of concerns between systems
- Clear organization of game mechanics

## System Interaction Flow

1. **Core Game Loop** (index.html) coordinates all systems and controls game state
2. **Player Input** (input.js) handled and translated to player movement
3. **Weapon Firing** (weapons.js) processes shooting input and creates projectiles
4. **Projectiles** (artillery.js, ballistics.js) manages projectile movement and effects
5. **Enemy Spawning and AI** (enemy.js, bestiary.js) controls enemy behavior
6. **Collision Detection** handled by Phaser's physics system
7. **Effect Application** managed by respective component systems
8. **UI Updates** (menu.js) reflect changes in player state
9. **Perk Acquisition** (perks.js, cards.js, challenge.js) handles player progression
10. **Special Systems** (life.js, pause.js, debug.js) provide additional functionality