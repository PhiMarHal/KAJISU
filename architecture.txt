# Word Survivors Code Architecture

## Files Overview

This document outlines the purpose of each major file in the Word Survivors project.

**index.html** - Main game file containing the Phaser game initialization, core gameplay loop, player movement, enemy interactions, and UI rendering. This file ties together all other modules and handles the game's main state, including pausing, level-up UI, and game over conditions.

**bestiary.js** - Defines all enemy types using Japanese kanji characters, including their base properties like translations and readings. It also defines rank-based defaults (health, speed, size, etc.) and provides utility functions to retrieve enemy data and generate random enemies during gameplay. Also handles dynamic assignment of enemies to difficulty tiers.

**perks.js** - Contains definitions for all player upgrades ("perks") including their kanji representations, translations, descriptions, visual styles, and effects. Each perk has an `onAcquire` function that triggers its immediate effect (like stat changes or activating a system) when the player selects it during level-up.

**artillery.js** - Implements the component-based system (`ProjectileComponentSystem`) for projectiles. It defines the framework for creating and managing reusable components (like `distanceDamage`, `slowEffect`, `poisonEffect`, `splitEffect`, `fireEffect`) that can be attached to projectiles, allowing for modular behavior.

**ballistics.js** - Provides a registry system (`ProjectilePerkRegistry`) that connects perks to projectile components defined in `artillery.js`. This file automates the application of effects (components) to projectiles based on which perks the player has acquired, often involving chance calculations based on player luck.

**hero.js** - Manages the player character's state, attributes, and status effects through a component-based system (`PlayerComponentSystem`). It contains the hero's basic properties (kanji, translations, base stats) and implements a framework for applying, updating, and removing status effects (components like `berserkerState`, `eternalRhythmState`, `permanentShieldAbility`) triggered by perks or game conditions. Includes a registry (`PlayerPerkRegistry`) to link perks to player status components and manages the `ShieldSystem`.

**menu.js** - Manages specific UI elements like the player's Health Bar and Experience Bar, including their creation and dynamic updates based on player stats.

**cooldown.js** - Defines `CooldownManager` which manages timers whose cooldowns dynamically scale based on player stats (like luck or fire rate). It updates these timers automatically when the relevant stats change significantly, ensuring abilities scale correctly with upgrades.

**droppers.js** - Implements the system (`DropperSystem`) for player-generated persistent world objects ("drops") like landmines or afterimages. Defines behaviors (`DropBehaviors`: explosive, persistent, areaEffect) and manages their lifecycle, enemy interactions, and periodic spawning.

**entrapments.js** - Defines `DropperPerkRegistry` which connects specific perks (from `perks.js`) to the dropper system (`droppers.js`). It automates the creation and configuration of drops (like landmines from 'Amber Beetle' or afterimages from 'Green Dream') based on acquired perks.

**nexus.js** - Defines `OrbitalPerkRegistry` which connects specific perks (from `perks.js`) to the orbital system (`orbitals.js`). It automates the creation and configuration of orbitals (like 'Teal Octopus' projectiles or 'Immortal' body parts) based on acquired perks, managing counts and cooldowns.

**onetime.js** - Defines `OneTimeEffects` which manages effects that trigger only once upon acquiring certain perks (e.g., screen clearing blasts like `shuuen`, stat scrambles like `purpleChaos`). Provides a registry and a function (`triggerOneTimeEffect`) to execute these single-use effects.

**orbitals.js** - Implements the system (`OrbitalSystem`) for entities that orbit the player. Defines various movement patterns (`MovementPatterns`: standard, elliptical, figureEight, etc.) and collision behaviors (`CollisionBehaviors`: persistent, projectile, explosive) and manages their lifecycle and enemy interactions.

**weapons.js** - Defines `WeaponSystem` which centralizes the player's primary weapon firing logic. Manages the firing timer (scaling with fire rate), target selection (closest enemy), and basic projectile creation, integrating with perk systems (`ballistics.js`) for effects like double shot or piercing.

**todobugs.txt** - A plain text file tracking known bugs, planned features, and potential improvements for the game.